{"version":3,"sources":["images/brick-hex.png","images/forest-hex.png","images/field-hex.png","images/rock-hex.png","images/wheat-hex.png","images/empty-hex.png","images/settlement.png","images/city.png","immutables.js","App/components/TileImage.js","App/SettlementSetup/Tile.js","App/components/AppButton.js","App/components/NumberButtons.js","App/SettlementSetup/TileModal.js","App/components/SettlementImage.js","App/SettlementSetup/index.js","App/Chart/index.js","App/NavBar.js","App/index.js","index.js"],"names":["module","exports","__webpack_require__","p","availableRolls","availableTypes","brick","brickHex","field","fieldHex","forest","forestHex","rock","rockHex","wheat","wheatHex","TileImage","_this$props","this","props","type","alt","height","react_default","a","createElement","src","emptyHex","Component","Tile","numberDisplay","number","onClick","imgHeight","className","classes","components_TileImage","AppButton","children","color","reactstrap_es","Object","assign","outline","NumberButtons","numbers","selectedNumber","onButtonClick","disabledNumbers","map","isDisabled","indexOf","components_AppButton","key","disabled","active","TileModal","tile","isOpen","toggle","onUpdateNumber","onUpdateType","onSave","onClear","components_NumberButtons","keys","SettlementImage","img","settlement","isCity","cityImg","settlementImg","library","add","faPlusCircle","faArrowAltCircleUp","faArrowAltCircleDown","faTimesCircle","SettlementSetup","state","showTileModal","activeTile","handleTileClick","_this","setState","objectSpread","toggleTileModal","handleActiveTileClear","handleActiveTileNumberUpdate","handleActiveTileTypeUpdate","handleTileSave","onTileUpdate","settlements","onSettlementAdd","filter","length","react_fontawesome_index_es","icon","size","_this$props2","onClearAll","_this2","_this$props3","tiles","onSettlementUpdate","onSettlementRemove","_this$state","Fragment","SettlementSetup_TileModal","getAddButton","settlementTiles","settlementId","id","tag","components_SettlementImage","i","SettlementSetup_Tile","getClearAllButton","Chart","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleNumberUpdate","calculateResourcesForRolls","reduce","resources","find","roll","resourcesForSelected","amount","NavBar","expand","fixed","dark","navbar","justified","horizontal","to","activeClassName","RRNavLink","App","getInitialState","lastSettlementId","lastTileId","resetState","saveStateToLocalStorage","localStorage","setItem","JSON","stringify","handleSettlementAdd","slice","newSettlementId","newTileId","newTiles","push","concat","toConsumableArray","handleSettlementUpdate","index","handleSettlementRemove","newSettlements","handleTileUpdate","newTile","findIndex","hydrateStateWithLocalStorage","window","addEventListener","removeEventListener","hasOwnProperty","value","getItem","parse","defineProperty","e","_this$state2","App_NavBar","Switch","Route","path","render","App_SettlementSetup","App_Chart","Redirect","from","ReactDOM","HashRouter","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.14908cf9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brick-hex.fab879f8.png\";","module.exports = __webpack_public_path__ + \"static/media/forest-hex.8725920d.png\";","module.exports = __webpack_public_path__ + \"static/media/field-hex.8c773516.png\";","module.exports = __webpack_public_path__ + \"static/media/rock-hex.a45b3e02.png\";","module.exports = __webpack_public_path__ + \"static/media/wheat-hex.dcd53bed.png\";","module.exports = __webpack_public_path__ + \"static/media/empty-hex.f50bee80.png\";","module.exports = __webpack_public_path__ + \"static/media/settlement.b283507d.png\";","module.exports = __webpack_public_path__ + \"static/media/city.68d7a430.png\";","import brickHex from './images/brick-hex.png';\nimport forestHex from './images/forest-hex.png';\nimport fieldHex from './images/field-hex.png';\nimport rockHex from './images/rock-hex.png';\nimport wheatHex from './images/wheat-hex.png';\n\nconst availableRolls = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconst availableTypes = {\n    'brick': brickHex,\n    'field': fieldHex,\n    'forest': forestHex,\n    'rock': rockHex,\n    'wheat': wheatHex,\n}\n\nexport { availableRolls, availableTypes };\n","import React, {Component} from 'react';\r\nimport { availableTypes } from '../../immutables';\r\nimport emptyHex from '../../images/empty-hex.png';\r\n\r\nclass TileImage extends Component {\r\n    render() {\r\n        const { type, alt, height } = this.props;\r\n\r\n        return (\r\n            <img\r\n                src={availableTypes[type] || emptyHex}\r\n                alt={alt || 'Tile'}\r\n                height={height || 90}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default TileImage;\r\n","import React, {Component} from 'react';\r\nimport TileImage from '../components/TileImage';\r\n\r\nclass Tile extends Component {\r\n    render() {\r\n        const { type, number, onClick, imgHeight, className } = this.props;\r\n        let numberDisplay;\r\n        if (number) {\r\n            numberDisplay = (\r\n                <div className=\"tile-number\">\r\n                    <span><b>{number}</b></span>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        let classes = \"tile\";\r\n        if (className) {\r\n            classes += \" \" + className;\r\n        }\r\n\r\n        return (\r\n            <div className={classes} onClick={onClick}>\r\n                <TileImage type={type} height={imgHeight}/>\r\n                {numberDisplay}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tile;\r\n","import React, {Component} from 'react';\r\nimport { Button } from 'reactstrap';\r\n\r\nclass AppButton extends Component {\r\n    render() {\r\n        const { children, color } = this.props;\r\n\r\n        return (\r\n            <Button {...this.props} outline color={color || \"secondary\"}>\r\n                {children}\r\n            </Button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AppButton;\r\n","import React, {Component} from 'react';\r\nimport { availableRolls } from '../../immutables';\r\nimport AppButton from \"./AppButton\";\r\n\r\nclass NumberButtons extends Component {\r\n    render() {\r\n        const { numbers, selectedNumber, onButtonClick, className, disabledNumbers } = this.props;\r\n\r\n        return (\r\n            <div className={className}>\r\n                {(numbers || availableRolls).map(number => {\r\n                    const isDisabled = disabledNumbers && disabledNumbers.indexOf(number) !== -1;\r\n\r\n                    return (\r\n                        <AppButton\r\n                            key={number}\r\n                            className=\"btn-round p-2 m-2\"\r\n                            disabled={isDisabled}\r\n                            active={number === selectedNumber}\r\n                            onClick={() => onButtonClick && onButtonClick(number)}\r\n                        >\r\n                            {number}\r\n                        </AppButton>\r\n                    );\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NumberButtons;\r\n","import React, {Component} from 'react';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { availableTypes } from '../../immutables';\r\n\r\nimport TileImage from '../components/TileImage';\r\nimport NumberButtons from '../components/NumberButtons';\r\nimport AppButton from '../components/AppButton';\r\n\r\nclass TileModal extends Component {\r\n    render() {\r\n        const { tile, isOpen, toggle, onUpdateNumber, onUpdateType, onSave, onClear } = this.props;\r\n\r\n        return (\r\n            <Modal isOpen={isOpen}>\r\n                <ModalHeader toggle={toggle}>Change Tile</ModalHeader>\r\n                <ModalBody>\r\n                    <NumberButtons\r\n                        className=\"d-flex justify-content-center flex-wrap mb-3\"\r\n                        selectedNumber={tile.number}\r\n                        onButtonClick={onUpdateNumber}\r\n                        disabledNumbers={[7]}\r\n                    />\r\n                    <div className=\"d-flex justify-content-center flex-wrap\">\r\n                        {Object.keys(availableTypes).map(type => (\r\n                            <AppButton\r\n                                key={type}\r\n                                className=\"tile m-1\"\r\n                                active={type === tile.type}\r\n                                onClick={() => onUpdateType(type)}\r\n                            >\r\n                                <TileImage type={type} height={70}/>\r\n                            </AppButton>\r\n                        ))}\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter className=\"d-flex justify-content-between\">\r\n                    <AppButton onClick={toggle}>Cancel</AppButton>\r\n                    <AppButton color=\"info\" onClick={onClear}>Clear</AppButton>\r\n                    <AppButton outline color=\"success\" onClick={() => onSave(tile)}>Done</AppButton>\r\n                </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TileModal;\r\n","import React, {Component} from 'react';\r\nimport settlementImg from '../../images/settlement.png';\r\nimport cityImg from '../../images/city.png';\r\n\r\nclass SettlementImage extends Component {\r\n    render() {\r\n        const { settlement } = this.props;\r\n\r\n        let img;\r\n        if (settlement.isCity) {\r\n            img = {\r\n                src: cityImg,\r\n                alt: 'City',\r\n                height: 60,\r\n            };\r\n        } else {\r\n            img = {\r\n                src: settlementImg,\r\n                alt: 'Settlement',\r\n                height: 50,\r\n            };\r\n        }\r\n\r\n        return (\r\n            <img src={img.src} alt={img.alt} height={img.height} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default SettlementImage;\r\n","import React, {Component} from 'react';\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlusCircle, faArrowAltCircleUp, faArrowAltCircleDown, faTimesCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { Alert, Card, CardBody, CardText, CardHeader } from 'reactstrap';\r\n\r\nimport Tile from './Tile';\r\nimport TileModal from './TileModal';\r\nimport SettlementImage from \"../components/SettlementImage\";\r\nimport AppButton from \"../components/AppButton\";\r\n\r\nlibrary.add(faPlusCircle, faArrowAltCircleUp, faArrowAltCircleDown, faTimesCircle)\r\n\r\nclass SettlementSetup extends Component {\r\n    state = {\r\n        showTileModal: false,\r\n        activeTile: {},\r\n    };\r\n\r\n    // settlements\r\n    getAddButton() {\r\n        const { settlements, onSettlementAdd } = this.props;\r\n\r\n        const settlementCount = settlements.filter(settlement => !settlement.isCity).length;\r\n        return settlementCount === 5 ?\r\n            <Alert color=\"info\">Max number of settlements reached</Alert>  :\r\n            <FontAwesomeIcon icon=\"plus-circle\" size=\"2x\" onClick={() => onSettlementAdd()} />;\r\n    }\r\n\r\n    getClearAllButton() {\r\n        const { settlements, onClearAll } = this.props;\r\n\r\n        if (!settlements || !settlements.length) {\r\n            return;\r\n        }\r\n\r\n        return <AppButton className=\"mb-3\" color=\"warning\" onClick={onClearAll}>Clear All</AppButton>;\r\n    }\r\n\r\n    // tiles\r\n    handleTileClick = tile => {\r\n        this.setState({\r\n            showTileModal: true,\r\n            activeTile: {...tile},\r\n        });\r\n    };\r\n\r\n    toggleTileModal = () => {\r\n        this.setState({\r\n            activeTile: {},\r\n            showTileModal: !this.state.showTileModal,\r\n        });\r\n    };\r\n\r\n    handleActiveTileClear = () => {\r\n        const activeTile = Object.assign({...this.state.activeTile}, {\r\n            number: null,\r\n            type: null,\r\n        });\r\n        this.setState({ activeTile });\r\n    };\r\n\r\n    handleActiveTileNumberUpdate = number => {\r\n        const activeTile = Object.assign({...this.state.activeTile}, { number });\r\n        this.setState({ activeTile });\r\n    };\r\n\r\n    handleActiveTileTypeUpdate = type => {\r\n        const activeTile = Object.assign({...this.state.activeTile}, { type });\r\n        this.setState({ activeTile });\r\n    };\r\n\r\n    handleTileSave = () => {\r\n        this.props.onTileUpdate(this.state.activeTile);\r\n        this.toggleTileModal();\r\n    };\r\n\r\n    render() {\r\n        const { settlements, tiles, onSettlementUpdate, onSettlementRemove } = this.props;\r\n        const { showTileModal, activeTile } = this.state;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <TileModal\r\n                    isOpen={showTileModal}\r\n                    tile={activeTile}\r\n                    toggle={this.toggleTileModal}\r\n                    onUpdateNumber={this.handleActiveTileNumberUpdate}\r\n                    onUpdateType={this.handleActiveTileTypeUpdate}\r\n                    onSave={this.handleTileSave}\r\n                    onClear={this.handleActiveTileClear}\r\n                />\r\n                <div className=\"mb-3\">\r\n                    {this.getAddButton()}\r\n                </div>\r\n                <div>\r\n                    {settlements.map(settlement => {\r\n                        const settlementTiles = tiles.filter(tile => (tile.settlementId === settlement.id));\r\n\r\n                        return (\r\n                            <Card className=\"mb-3\" key={settlement.id}>\r\n                                <CardBody className=\"p-0\">\r\n                                    <CardHeader className=\"bg-light\">\r\n                                        <div className=\"row no-gutters\">\r\n                                            <div className=\"col-6 text-left\">\r\n                                                <FontAwesomeIcon\r\n                                                    icon={\r\n                                                        settlement.isCity ?\r\n                                                        \"arrow-alt-circle-down\" :\r\n                                                        \"arrow-alt-circle-up\"\r\n                                                    }\r\n                                                    size=\"2x\"\r\n                                                    onClick={() => onSettlementUpdate(settlement)}\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"col-6 text-right\">\r\n                                                <FontAwesomeIcon\r\n                                                    icon=\"times-circle\"\r\n                                                    size=\"2x\"\r\n                                                    onClick={() => onSettlementRemove(settlement.id)}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </CardHeader>\r\n                                    <CardText tag=\"div\">\r\n                                        <div className=\"row no-gutters align-items-center p-2\">\r\n                                            <div className=\"col-3 text-center align-content-center\">\r\n                                                <SettlementImage settlement={settlement} />\r\n                                            </div>\r\n                                            <div className=\"col-9\">\r\n                                                <div className=\"row no-gutters\">\r\n                                                    {settlementTiles.map((tile, i) => {\r\n                                                        const className = i === 0 ? \"col-12\" : \"col-6\";\r\n\r\n                                                        return (\r\n                                                            <div key={tile.id} className={className}>\r\n                                                                <Tile\r\n                                                                    type={tile.type}\r\n                                                                    number={tile.number}\r\n                                                                    imgHeight={80}\r\n                                                                    onClick={() => this.handleTileClick(tile)}\r\n                                                                />\r\n                                                            </div>\r\n                                                        );\r\n                                                    })}\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </CardText>\r\n                                </CardBody>\r\n                            </Card>\r\n                        );\r\n                    })}\r\n                </div>\r\n                <div>\r\n                    {this.getClearAllButton()}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SettlementSetup;\r\n","import React, {Component} from 'react';\r\nimport NumberButtons from \"../components/NumberButtons\";\r\nimport Tile from \"../SettlementSetup/Tile\";\r\nimport { availableRolls } from \"../../immutables\";\r\n\r\nclass Chart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const resources = this.calculateResourcesForRolls();\r\n        const disabledNumbers = availableRolls.filter(roll => !resources[roll]);\r\n\r\n        this.state = {\r\n            selectedNumber: props.selectedNumber,\r\n            resources: resources,\r\n            disabledNumbers: disabledNumbers,\r\n        };\r\n    }\r\n\r\n    handleNumberUpdate = number => {\r\n        const { disabledNumbers } = this.state;\r\n        if (disabledNumbers.indexOf(number) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            selectedNumber: number,\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const { resources, selectedNumber, disabledNumbers } = this.state;\r\n        const resourcesForSelected = resources[selectedNumber] || [];\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <NumberButtons\r\n                    className=\"d-flex justify-content-center flex-wrap mb-5\"\r\n                    selectedNumber={selectedNumber}\r\n                    disabledNumbers={disabledNumbers}\r\n                    onButtonClick={this.handleNumberUpdate}\r\n                />\r\n                <div className=\"d-flex justify-content-center bd-highlight mb-3\">\r\n                    {Object.keys(resourcesForSelected).map(function(type) {\r\n                        const amount = resourcesForSelected[type];\r\n\r\n                        return (\r\n                            <div className=\"p-2 bd-highlight\" key={type}>\r\n                                <Tile key={type} type={type} number={amount} />\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    calculateResourcesForRolls = () => {\r\n        const { settlements, tiles } = this.props;\r\n\r\n        return tiles.reduce((resources, tile) => {\r\n            const settlement = settlements.find(settlement => settlement.id === tile.settlementId);\r\n            const { type, number } = tile;\r\n\r\n            if (!resources[number]) {\r\n                resources[number] = {};\r\n            }\r\n\r\n            if (!resources[number][type]) {\r\n                resources[number][type] = 0;\r\n            }\r\n\r\n            resources[number][type] += settlement.isCity ? 2 : 1;\r\n\r\n            return resources;\r\n        }, {});\r\n    }\r\n}\r\n\r\nexport default Chart;\r\n","import React, {Component} from 'react';\r\nimport { NavLink as RRNavLink } from 'react-router-dom';\r\nimport { Navbar, Nav, NavItem, NavLink} from 'reactstrap';\r\n\r\nclass NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar className=\"p-0\" expand fixed=\"top\" dark>\r\n                <Nav className=\"w-100\" navbar justified horizontal=\"center\">\r\n                    <NavItem>\r\n                        <NavLink to=\"/setup\" activeClassName=\"active\" tag={RRNavLink}>Settlements</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to=\"/chart\" activeClassName=\"active\" tag={RRNavLink}>Chart</NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, {Component} from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\n\r\nimport SettlementSetup from './SettlementSetup/index';\r\nimport Chart from './Chart/index';\r\nimport NavBar from './NavBar';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.getInitialState();\r\n    }\r\n\r\n    getInitialState = () => {\r\n        return {\r\n            lastSettlementId: 0,\r\n            lastTileId: 0,\r\n            settlements: [],\r\n            tiles: [],\r\n            showTileModal: false,\r\n            activeTile: {},\r\n        };\r\n    }\r\n\r\n    resetState = () => {\r\n        this.setState(this.getInitialState());\r\n    }\r\n\r\n    // @TODO - Fix bug where the chart screen doesn't update if the page was refreshed there\r\n    // local storage\r\n    componentDidMount() {\r\n        this.hydrateStateWithLocalStorage();\r\n\r\n        // add event listener to save state to localStorage\r\n        // when user leaves/refreshes the page\r\n        window.addEventListener(\r\n            \"beforeunload\",\r\n            this.saveStateToLocalStorage\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\r\n            \"beforeunload\",\r\n            this.saveStateToLocalStorage\r\n        );\r\n\r\n        // saves if component has a chance to unmount\r\n        this.saveStateToLocalStorage();\r\n    }\r\n\r\n    hydrateStateWithLocalStorage() {\r\n        // for all items in state\r\n        for (let key in this.state) {\r\n            // if the key exists in localStorage\r\n            if (localStorage.hasOwnProperty(key)) {\r\n                // get the key's value from localStorage\r\n                let value = localStorage.getItem(key);\r\n\r\n                // parse the localStorage string and setState\r\n                try {\r\n                    value = JSON.parse(value);\r\n                    this.setState({ [key]: value });\r\n                } catch (e) {\r\n                    // handle empty string\r\n                    this.setState({ [key]: value });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    saveStateToLocalStorage = () => {\r\n        // for every item in React state\r\n        for (let key in this.state) {\r\n            // save to localStorage\r\n            localStorage.setItem(key, JSON.stringify(this.state[key]));\r\n        }\r\n    }\r\n\r\n    // settlements\r\n    handleSettlementAdd = () => {\r\n        const settlements = this.state.settlements.slice();\r\n        const newSettlementId = this.state.lastSettlementId + 1;\r\n\r\n        const tiles = this.state.tiles.slice();\r\n        let newTileId = this.state.lastTileId;\r\n\r\n        let newTiles = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            newTiles.push({\r\n                id: ++newTileId,\r\n                settlementId: newSettlementId,\r\n                type: null,\r\n                number: null,\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            lastSettlementId: newSettlementId,\r\n            lastTileId: newTileId,\r\n\r\n            settlements: [{\r\n                id: newSettlementId,\r\n                isCity: false,\r\n            }, ...settlements],\r\n\r\n            tiles: tiles.concat(newTiles)\r\n        });\r\n    };\r\n\r\n    handleSettlementUpdate = settlement => {\r\n        const settlements = this.state.settlements.slice();\r\n        const enableToggle = settlement.isCity ?\r\n            settlements.filter(settlement => !settlement.isCity).length < 5 :\r\n            settlements.filter(settlement => settlement.isCity).length < 4;\r\n\r\n        if (!enableToggle) {\r\n            return;\r\n        }\r\n\r\n        const index = settlements.indexOf(settlement);\r\n        settlements[index].isCity = !settlements[index].isCity;\r\n\r\n        this.setState({ settlements });\r\n    };\r\n\r\n    handleSettlementRemove = settlementId => {\r\n        const { settlements, tiles } = this.state;\r\n        const newSettlements = settlements.filter(settlement => settlement.id !== settlementId);\r\n        const newTiles = tiles.filter(tile => tile.settlementId !== settlementId);\r\n\r\n        this.setState({\r\n            settlements: newSettlements,\r\n            tiles: newTiles,\r\n        });\r\n    };\r\n\r\n    // tiles\r\n    handleTileUpdate = newTile => {\r\n        if ((newTile.type && !newTile.number) || (!newTile.type && newTile.number)) {\r\n            return;\r\n        }\r\n\r\n        const { tiles } = this.state;\r\n        const newTiles = tiles.slice();\r\n        const index = newTiles.findIndex(tile => tile.id === newTile.id);\r\n\r\n        newTiles[index] = Object.assign(newTiles[index], newTile);\r\n\r\n        this.setState({ tiles: newTiles });\r\n    };\r\n\r\n    render() {\r\n        const { settlements, tiles } = this.state;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <NavBar />\r\n                <main className=\"container\">\r\n                    <div className=\"text-center\">\r\n                        <Switch>\r\n                            <Route\r\n                                path=\"/setup\"\r\n                                render={(props) => (\r\n                                    <SettlementSetup\r\n                                        {...props}\r\n                                        settlements={settlements}\r\n                                        tiles={tiles}\r\n                                        onSettlementAdd={this.handleSettlementAdd}\r\n                                        onSettlementUpdate={this.handleSettlementUpdate}\r\n                                        onSettlementRemove={this.handleSettlementRemove}\r\n                                        onTileUpdate={this.handleTileUpdate}\r\n                                        onClearAll={this.resetState}\r\n                                    />\r\n                                )}\r\n                            />\r\n                            <Route\r\n                                path=\"/chart\"\r\n                                render={(props) => (\r\n                                    <Chart\r\n                                        {...props}\r\n                                        settlements={settlements}\r\n                                        tiles={tiles.filter(tile => tile.type !== \"empty\")}\r\n                                    />\r\n                                )}\r\n                            />\r\n                            <Redirect from=\"/\" to=\"/setup\" />\r\n                        </Switch>\r\n                    </div>\r\n                </main>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/index';\nimport { HashRouter } from 'react-router-dom'\n\nReactDOM.render((\n    <HashRouter>\n        <App />\n    </HashRouter>\n    ), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n"],"sourceRoot":""}