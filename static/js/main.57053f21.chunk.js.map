{"version":3,"sources":["images/brick-hex.png","images/forest-hex.png","images/field-hex.png","images/rock-hex.png","images/wheat-hex.png","images/empty-hex.png","images/settlement.png","images/city.png","immutables.js","App/components/TileImage.js","App/SettlementSetup/Tile.js","App/SettlementSetup/Settlement.js","App/components/AppButton.js","App/components/NumberButtons.js","App/SettlementSetup/TileModal.js","App/SettlementSetup/index.js","App/Chart/index.js","App/NavBar.js","App/index.js","index.js"],"names":["module","exports","__webpack_require__","p","availableRolls","availableTypes","brick","brickHex","field","fieldHex","forest","forestHex","rock","rockHex","wheat","wheatHex","TileImage","_this$props","this","props","type","alt","height","react_default","a","createElement","src","emptyHex","Component","Tile","numberDisplay","number","onClick","className","components_TileImage","Settlement","img","settlement","tiles","onTileClick","isCity","cityImg","settlementImg","map","tile","key","id","SettlementSetup_Tile","AppButton","children","color","reactstrap_es","Object","assign","outline","NumberButtons","numbers","selectedNumber","onButtonClick","disabledNumbers","isDisabled","indexOf","components_AppButton","disabled","active","TileModal","isOpen","toggle","onUpdateNumber","onUpdateType","onSave","onClear","components_NumberButtons","keys","library","add","faPlusCircle","SettlementSetup","state","showTileModal","activeTile","handleTileClick","_this","setState","objectSpread","toggleTileModal","handleActiveTileClear","handleActiveTileNumberUpdate","handleActiveTileTypeUpdate","handleTileSave","onTileUpdate","settlements","onSettlementAdd","filter","length","react_fontawesome_index_es","icon","size","_this$props2","onClearAll","_this2","_this$props3","onSettlementUpdate","_this$state","Fragment","SettlementSetup_TileModal","getAddButton","i","SettlementSetup_Settlement","settlementId","getClearAllButton","Chart","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleNumberUpdate","calculateResourcesForRolls","reduce","resources","find","roll","resourcesForSelected","amount","NavBar","expand","fixed","dark","navbar","justified","horizontal","to","activeClassName","tag","RRNavLink","App","getInitialState","lastSettlementId","lastTileId","resetState","saveStateToLocalStorage","localStorage","setItem","JSON","stringify","handleSettlementAdd","slice","newSettlementId","newTileId","newTiles","push","concat","toConsumableArray","handleSettlementUpdate","index","handleTileUpdate","newTile","findIndex","hydrateStateWithLocalStorage","window","addEventListener","removeEventListener","hasOwnProperty","value","getItem","parse","defineProperty","e","App_NavBar","Switch","Route","path","render","App_SettlementSetup","App_Chart","Redirect","from","ReactDOM","HashRouter","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.57053f21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brick-hex.fab879f8.png\";","module.exports = __webpack_public_path__ + \"static/media/forest-hex.8725920d.png\";","module.exports = __webpack_public_path__ + \"static/media/field-hex.8c773516.png\";","module.exports = __webpack_public_path__ + \"static/media/rock-hex.a45b3e02.png\";","module.exports = __webpack_public_path__ + \"static/media/wheat-hex.dcd53bed.png\";","module.exports = __webpack_public_path__ + \"static/media/empty-hex.f50bee80.png\";","module.exports = __webpack_public_path__ + \"static/media/settlement.694f53ee.png\";","module.exports = __webpack_public_path__ + \"static/media/city.26af67f7.png\";","import brickHex from './images/brick-hex.png';\nimport forestHex from './images/forest-hex.png';\nimport fieldHex from './images/field-hex.png';\nimport rockHex from './images/rock-hex.png';\nimport wheatHex from './images/wheat-hex.png';\n\nconst availableRolls = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconst availableTypes = {\n    'brick': brickHex,\n    'field': fieldHex,\n    'forest': forestHex,\n    'rock': rockHex,\n    'wheat': wheatHex,\n}\n\nexport { availableRolls, availableTypes };\n","import React, {Component} from 'react';\r\nimport { availableTypes } from '../../immutables';\r\nimport emptyHex from '../../images/empty-hex.png';\r\n\r\nclass TileImage extends Component {\r\n    render() {\r\n        const { type, alt, height } = this.props;\r\n\r\n        return (\r\n            <img\r\n                src={availableTypes[type] || emptyHex}\r\n                alt={alt || 'Tile'}\r\n                height={height || 90}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default TileImage;\r\n","import React, {Component} from 'react';\r\nimport TileImage from '../components/TileImage';\r\n\r\nclass Tile extends Component {\r\n    render() {\r\n        const { type, number, onClick } = this.props;\r\n        let numberDisplay;\r\n        if (number) {\r\n            numberDisplay = (\r\n                <div className=\"tile-number\">\r\n                    <span><b>{number}</b></span>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"tile\" onClick={onClick}>\r\n                <TileImage type={type}/>\r\n                {numberDisplay}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tile;\r\n","import React, {Component} from 'react';\r\nimport Tile from './Tile';\r\nimport settlementImg from '../../images/settlement.png';\r\nimport cityImg from '../../images/city.png';\r\n\r\nclass Settlement extends Component {\r\n    render() {\r\n        const { settlement, tiles, onClick, onTileClick } = this.props;\r\n\r\n        let img;\r\n        if (settlement.isCity) {\r\n            img = {\r\n                src: cityImg,\r\n                alt: 'City',\r\n                height: 80,\r\n            };\r\n        } else {\r\n            img = {\r\n                src: settlementImg,\r\n                alt: 'Settlement',\r\n                height: 60,\r\n            };\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <img\r\n                    src={img.src}\r\n                    alt={img.alt}\r\n                    height={img.height}\r\n                    onClick={() => onClick(settlement)}\r\n                />\r\n\r\n                <div className=\"d-flex justify-content-center bd-highlight mb-3\">\r\n                    {tiles.map(tile => {\r\n                        return (\r\n                            <div className=\"p-2 bd-highlight\" key={tile.id}>\r\n                                <Tile\r\n                                    type={tile.type}\r\n                                    number={tile.number}\r\n                                    onClick={() => onTileClick(tile)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Settlement;\r\n","import React, {Component} from 'react';\r\nimport { Button } from 'reactstrap';\r\n\r\nclass AppButton extends Component {\r\n    render() {\r\n        const { children, color } = this.props;\r\n        return (\r\n            <Button {...this.props} outline color={color || \"secondary\"}>\r\n                {children}\r\n            </Button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AppButton;\r\n","import React, {Component} from 'react';\r\nimport { availableRolls } from '../../immutables';\r\nimport AppButton from \"./AppButton\";\r\n\r\nclass NumberButtons extends Component {\r\n    render() {\r\n        const { numbers, selectedNumber, onButtonClick, className, disabledNumbers } = this.props;\r\n\r\n        return (\r\n            <div className={className}>\r\n                {(numbers || availableRolls).map(number => {\r\n                    const isDisabled = disabledNumbers && disabledNumbers.indexOf(number) !== -1;\r\n\r\n                    return (\r\n                        <AppButton\r\n                            key={number}\r\n                            className=\"btn-round p-2 m-2\"\r\n                            disabled={isDisabled}\r\n                            active={number === selectedNumber}\r\n                            onClick={() => onButtonClick && onButtonClick(number)}\r\n                        >\r\n                            {number}\r\n                        </AppButton>\r\n                    );\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NumberButtons;\r\n","import React, {Component} from 'react';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { availableTypes } from '../../immutables';\r\n\r\nimport TileImage from '../components/TileImage';\r\nimport NumberButtons from '../components/NumberButtons';\r\nimport AppButton from '../components/AppButton';\r\n\r\nclass TileModal extends Component {\r\n    render() {\r\n        const { tile, isOpen, toggle, onUpdateNumber, onUpdateType, onSave, onClear } = this.props;\r\n\r\n        return (\r\n            <Modal isOpen={isOpen}>\r\n                <ModalHeader toggle={toggle}>Change Tile</ModalHeader>\r\n                <ModalBody>\r\n                    <NumberButtons\r\n                        className=\"d-flex justify-content-center flex-wrap mb-3\"\r\n                        selectedNumber={tile.number}\r\n                        onButtonClick={onUpdateNumber}\r\n                        disabledNumbers={[7]}\r\n                    />\r\n                    <div className=\"d-flex justify-content-center flex-wrap\">\r\n                        {Object.keys(availableTypes).map(type => (\r\n                            <AppButton\r\n                                key={type}\r\n                                className=\"tile m-1\"\r\n                                active={type === tile.type}\r\n                                onClick={() => onUpdateType(type)}\r\n                            >\r\n                                <TileImage type={type} height={70}/>\r\n                            </AppButton>\r\n                        ))}\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter className=\"d-flex justify-content-between\">\r\n                    <AppButton onClick={toggle}>Cancel</AppButton>\r\n                    <AppButton color=\"info\" onClick={onClear}>Clear</AppButton>\r\n                    <AppButton outline color=\"success\" onClick={() => onSave(tile)}>Done</AppButton>\r\n                </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TileModal;\r\n","import React, {Component} from 'react';\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { Alert } from 'reactstrap';\r\n\r\nimport Settlement from './Settlement';\r\nimport TileModal from './TileModal';\r\nimport AppButton from \"../components/AppButton\";\r\n\r\nlibrary.add(faPlusCircle)\r\n\r\nclass SettlementSetup extends Component {\r\n    state = {\r\n        showTileModal: false,\r\n        activeTile: {},\r\n    };\r\n\r\n    // settlements\r\n    getAddButton() {\r\n        const { settlements, onSettlementAdd } = this.props;\r\n\r\n        const settlementCount = settlements.filter(settlement => !settlement.isCity).length;\r\n        if (settlementCount === 5) {\r\n            return <Alert color=\"info\">Max number of settlements reached</Alert>;\r\n        }\r\n\r\n        return (\r\n            <FontAwesomeIcon\r\n                className=\"mb-3\"\r\n                icon=\"plus-circle\"\r\n                size=\"2x\"\r\n                onClick={() => onSettlementAdd()}\r\n            />\r\n        );\r\n    }\r\n\r\n    getClearAllButton() {\r\n        const { settlements, onClearAll } = this.props;\r\n\r\n        if (!settlements || !settlements.length) {\r\n            return;\r\n        }\r\n\r\n        return <AppButton color=\"warning\" onClick={onClearAll}>Clear All</AppButton>;\r\n    }\r\n\r\n    // tiles\r\n    handleTileClick = tile => {\r\n        this.setState({\r\n            showTileModal: true,\r\n            activeTile: {...tile},\r\n        });\r\n    };\r\n\r\n    toggleTileModal = () => {\r\n        this.setState({\r\n            activeTile: {},\r\n            showTileModal: !this.state.showTileModal,\r\n        });\r\n    };\r\n\r\n    handleActiveTileClear = () => {\r\n        const activeTile = Object.assign({...this.state.activeTile}, {\r\n            number: null,\r\n            type: null,\r\n        });\r\n        this.setState({ activeTile });\r\n    };\r\n\r\n    handleActiveTileNumberUpdate = number => {\r\n        const activeTile = Object.assign({...this.state.activeTile}, { number });\r\n        this.setState({ activeTile });\r\n    };\r\n\r\n    handleActiveTileTypeUpdate = type => {\r\n        const activeTile = Object.assign({...this.state.activeTile}, { type });\r\n        this.setState({ activeTile });\r\n    };\r\n\r\n    handleTileSave = () => {\r\n        this.props.onTileUpdate(this.state.activeTile);\r\n        this.toggleTileModal();\r\n    }\r\n\r\n    render() {\r\n        const { settlements, tiles, onSettlementUpdate } = this.props;\r\n        const { showTileModal, activeTile } = this.state;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <TileModal\r\n                    isOpen={showTileModal}\r\n                    tile={activeTile}\r\n                    toggle={this.toggleTileModal}\r\n                    onUpdateNumber={this.handleActiveTileNumberUpdate}\r\n                    onUpdateType={this.handleActiveTileTypeUpdate}\r\n                    onSave={this.handleTileSave}\r\n                    onClear={this.handleActiveTileClear}\r\n                />\r\n                <div>\r\n                    {this.getAddButton()}\r\n                    {settlements.map((settlement, i) => (\r\n                        <Settlement\r\n                            key={settlement.id}\r\n                            settlement={settlement}\r\n                            tiles={tiles.filter(tile => (tile.settlementId === settlement.id))}\r\n                            onClick={onSettlementUpdate}\r\n                            onTileClick={this.handleTileClick}\r\n                        />\r\n                    ))}\r\n                    {this.getClearAllButton()}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SettlementSetup;\r\n","import React, {Component} from 'react';\r\nimport NumberButtons from \"../components/NumberButtons\";\r\nimport Tile from \"../SettlementSetup/Tile\";\r\nimport { availableRolls } from \"../../immutables\";\r\n\r\nclass Chart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const resources = this.calculateResourcesForRolls();\r\n        const disabledNumbers = availableRolls.filter(roll => !resources[roll]);\r\n\r\n        this.state = {\r\n            selectedNumber: props.selectedNumber,\r\n            resources: resources,\r\n            disabledNumbers: disabledNumbers,\r\n        };\r\n    }\r\n\r\n    handleNumberUpdate = number => {\r\n        const { disabledNumbers } = this.state;\r\n        if (disabledNumbers.indexOf(number) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            selectedNumber: number,\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const { resources, selectedNumber, disabledNumbers } = this.state;\r\n        const resourcesForSelected = resources[selectedNumber] || [];\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <NumberButtons\r\n                    className=\"d-flex justify-content-center flex-wrap mb-5\"\r\n                    selectedNumber={selectedNumber}\r\n                    disabledNumbers={disabledNumbers}\r\n                    onButtonClick={this.handleNumberUpdate}\r\n                />\r\n                <div className=\"d-flex justify-content-center bd-highlight mb-3\">\r\n                    {Object.keys(resourcesForSelected).map(function(type) {\r\n                        const amount = resourcesForSelected[type];\r\n\r\n                        return (\r\n                            <div className=\"p-2 bd-highlight\" key={type}>\r\n                                <Tile key={type} type={type} number={amount} />\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    calculateResourcesForRolls = () => {\r\n        const { settlements, tiles } = this.props;\r\n\r\n        return tiles.reduce((resources, tile) => {\r\n            const settlement = settlements.find(settlement => settlement.id === tile.settlementId);\r\n            const { type, number } = tile;\r\n\r\n            if (!resources[number]) {\r\n                resources[number] = {};\r\n            }\r\n\r\n            if (!resources[number][type]) {\r\n                resources[number][type] = 0;\r\n            }\r\n\r\n            resources[number][type] += settlement.isCity ? 2 : 1;\r\n\r\n            return resources;\r\n        }, {});\r\n    }\r\n}\r\n\r\nexport default Chart;\r\n","import React, {Component} from 'react';\r\nimport { NavLink as RRNavLink } from 'react-router-dom';\r\nimport { Navbar, Nav, NavItem, NavLink} from 'reactstrap';\r\n\r\nclass NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar className=\"p-0\" expand color=\"dark\" fixed=\"top\" dark>\r\n                <Nav className=\"w-100\" navbar justified horizontal=\"center\">\r\n                    <NavItem>\r\n                        <NavLink to=\"/setup\" activeClassName=\"active\" tag={RRNavLink}>Settlements</NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink to=\"/chart\" activeClassName=\"active\" tag={RRNavLink}>Chart</NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, {Component} from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\n\r\nimport SettlementSetup from './SettlementSetup/index';\r\nimport Chart from './Chart/index';\r\nimport NavBar from './NavBar';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.getInitialState();\r\n    }\r\n\r\n    getInitialState = () => {\r\n        return {\r\n            lastSettlementId: 0,\r\n            lastTileId: 0,\r\n            settlements: [],\r\n            tiles: [],\r\n            showTileModal: false,\r\n            activeTile: {},\r\n        };\r\n    }\r\n\r\n    resetState = () => {\r\n        this.setState(this.getInitialState());\r\n    }\r\n\r\n    // @TODO - Fix bug where the chart screen doesn't update if the page was refreshed there\r\n    // local storage\r\n    componentDidMount() {\r\n        this.hydrateStateWithLocalStorage();\r\n\r\n        // add event listener to save state to localStorage\r\n        // when user leaves/refreshes the page\r\n        window.addEventListener(\r\n            \"beforeunload\",\r\n            this.saveStateToLocalStorage\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\r\n            \"beforeunload\",\r\n            this.saveStateToLocalStorage\r\n        );\r\n\r\n        // saves if component has a chance to unmount\r\n        this.saveStateToLocalStorage();\r\n    }\r\n\r\n    hydrateStateWithLocalStorage() {\r\n        // for all items in state\r\n        for (let key in this.state) {\r\n            // if the key exists in localStorage\r\n            if (localStorage.hasOwnProperty(key)) {\r\n                // get the key's value from localStorage\r\n                let value = localStorage.getItem(key);\r\n\r\n                // parse the localStorage string and setState\r\n                try {\r\n                    value = JSON.parse(value);\r\n                    this.setState({ [key]: value });\r\n                } catch (e) {\r\n                    // handle empty string\r\n                    this.setState({ [key]: value });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    saveStateToLocalStorage = () => {\r\n        // for every item in React state\r\n        for (let key in this.state) {\r\n            // save to localStorage\r\n            localStorage.setItem(key, JSON.stringify(this.state[key]));\r\n        }\r\n    }\r\n\r\n    // settlements\r\n    handleSettlementAdd = () => {\r\n        const settlements = this.state.settlements.slice();\r\n        const newSettlementId = this.state.lastSettlementId + 1;\r\n\r\n        const tiles = this.state.tiles.slice();\r\n        let newTileId = this.state.lastTileId;\r\n\r\n        let newTiles = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            newTiles.push({\r\n                id: ++newTileId,\r\n                settlementId: newSettlementId,\r\n                type: null,\r\n                number: null,\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            lastSettlementId: newSettlementId,\r\n            lastTileId: newTileId,\r\n\r\n            settlements: [{\r\n                id: newSettlementId,\r\n                isCity: false,\r\n            }, ...settlements],\r\n\r\n            tiles: tiles.concat(newTiles)\r\n        });\r\n    };\r\n\r\n    handleSettlementUpdate = settlement => {\r\n        const settlements = this.state.settlements.slice();\r\n        const enableToggle = settlement.isCity ?\r\n            settlements.filter(settlement => !settlement.isCity).length < 5 :\r\n            settlements.filter(settlement => settlement.isCity).length < 4;\r\n\r\n        if (!enableToggle) {\r\n            return;\r\n        }\r\n\r\n        const index = settlements.indexOf(settlement);\r\n        settlements[index].isCity = !settlements[index].isCity;\r\n\r\n        this.setState({ settlements });\r\n    };\r\n\r\n    // tiles\r\n    handleTileUpdate = newTile => {\r\n        if ((newTile.type && !newTile.number) || (!newTile.type && newTile.number)) {\r\n            return;\r\n        }\r\n\r\n        const { tiles } = this.state;\r\n        const newTiles = tiles.slice();\r\n        const index = newTiles.findIndex(tile => tile.id === newTile.id);\r\n\r\n        newTiles[index] = Object.assign(newTiles[index], newTile);\r\n\r\n        this.setState({ tiles: newTiles });\r\n    };\r\n\r\n    render() {\r\n        const { settlements, tiles } = this.state;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <NavBar />\r\n                <main className=\"container\">\r\n                    <div className=\"text-center\">\r\n                        <Switch>\r\n                            <Route\r\n                                path=\"/setup\"\r\n                                render={(props) => (\r\n                                    <SettlementSetup\r\n                                        {...props}\r\n                                        settlements={settlements}\r\n                                        tiles={tiles}\r\n                                        onSettlementAdd={this.handleSettlementAdd}\r\n                                        onSettlementUpdate={this.handleSettlementUpdate}\r\n                                        onTileUpdate={this.handleTileUpdate}\r\n                                        onClearAll={this.resetState}\r\n                                    />\r\n                                )}\r\n                            />\r\n                            <Route\r\n                                path=\"/chart\"\r\n                                render={(props) => (\r\n                                    <Chart\r\n                                        {...props}\r\n                                        settlements={settlements}\r\n                                        tiles={tiles.filter(tile => tile.type !== \"empty\")}\r\n                                    />\r\n                                )}\r\n                            />\r\n                            <Redirect from=\"/\" to=\"/setup\" />\r\n                        </Switch>\r\n                    </div>\r\n                </main>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/index';\nimport { HashRouter } from 'react-router-dom'\n\nReactDOM.render((\n    <HashRouter>\n        <App />\n    </HashRouter>\n    ), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n"],"sourceRoot":""}